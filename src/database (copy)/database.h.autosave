#ifndef DATABASE_H
#define DATABASE_H

#include <iostream>
#include <memory>
#include <mutex>
#include <thread>

#include <Poco/UUIDGenerator.h>

#include <Poco/MongoDB/Array.h>
#include <Poco/MongoDB/Connection.h>
#include <Poco/MongoDB/Cursor.h>
#include <Poco/MongoDB/Database.h>
#include <Poco/MongoDB/Document.h>
#include <Poco/MongoDB/Element.h>
#include <Poco/MongoDB/PoolableConnectionFactory.h>


typedef Poco::PoolableObjectFactory<Poco::MongoDB::Connection, Poco::MongoDB::Connection::Ptr>
	MongoDBConnectionFactory;
typedef std::unique_ptr<MongoDBConnectionFactory> MongoDBConnectionFactoryPtr;

typedef Poco::ObjectPool<Poco::MongoDB::Connection, Poco::MongoDB::Connection::Ptr>
	MongoDBConnectionPool;
typedef std::unique_ptr<MongoDBConnectionPool> MongoDBConnectionPoolPtr;

// global variables

MongoDBConnectionFactoryPtr g_connectionFactory;
MongoDBConnectionPoolPtr g_connectionPool;

Poco::MongoDB::Database g_db("pocoTestDB");

MongoDB::PooledConnection takeConnection()
{
	static std::mutex connectionPoolLock;
	std::lock_guard<std::mutex> l(connectionPoolLock);

	MongoDB::PooledConnection pooledConnection(*g_connectionPool);
	auto c = static_cast<MongoDB::Connection::Ptr>(pooledConnection);

	if (!c) {
	// Connection pool can return null if the pool is full
	// TODO: Gracefully handle this here or implement
	// ObjectPool::borrowObjectWithTimeout
	}

	return std::move(pooledConnection);
}

class Database
{
public:
	Database();
	
};

#endif // DATABASE_H